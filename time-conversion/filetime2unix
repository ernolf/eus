#!/bin/bash

# input value (hexadecimal or decimal. Maximum = 0xFFFFFFFFFFFFFFFF)
input_value=$1

if [[ $input_value == "0x"* ]]; then
	# use python, to enable large files
	filetime=$(python -c "print($input_value)")
else
	filetime=$input_value
fi

while [ ${#filetime} -lt 18 ]; do filetime="${filetime}0";done

# offset in seconds between Windows-zero point (1601) and unix-zero point (1970)
offset=11644473600

# convert 100-modulo-steps to seconds and apply offset
unixtime=$(python -c "print(($filetime // 10000000) - $offset)")

# extrakt the remaining modulo
modulo=$(python -c "print($filetime % 10000000)")

# remove trailing 0
modulo=$(echo $modulo | sed 's/0*$//')

# only show modulo if present
((modulo))&&modulo=".$modulo"||unset modulo

formatted_date=$(date -u -d @"$unixtime" "+%Y-%m-%d %H:%M:%S$modulo UTC")

echo "Input Value: $input_value"

echo "Windows FileTime (decimal): $filetime"
echo "Windows FileTime (hexadecimal): 0x$(printf "%X" "$filetime")"
echo "Unix-/Epoch-Time: $unixtime$modulo"
echo "Date and Time: $formatted_date"

exit 0


#    FILETIME:
#    Contains a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 (UTC).
#    see:
#    https://learn.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-filetime
#    https://learn.microsoft.com/de-de/windows/win32/api/minwinbase/ns-minwinbase-filetime


