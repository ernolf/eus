#!/usr/bin/env python3
import sys
import math
from decimal import Decimal, getcontext

def calculate(expression, decimal_places):
	try:
		# Replace commas with dots for evaluation
		expression = expression.replace(',', '.')

		# Set the precision for Decimal calculations
		getcontext().prec = decimal_places + 10  # Extra precision to avoid rounding issues

		# Define a safe dictionary with mathematical functions and constants
		allowed_functions = {
			'sin': lambda x: Decimal(math.sin(x)),
			'cos': lambda x: Decimal(math.cos(x)),
			'tan': lambda x: Decimal(math.tan(x)),
			'log': lambda x: Decimal(math.log(x)),
			'log10': lambda x: Decimal(math.log10(x)),
			'exp': lambda x: Decimal(math.exp(x)),
			'sqrt': lambda x: Decimal(math.sqrt(x)),
			'pi': Decimal(math.pi),
			'e': Decimal(math.e),
			'to_radians': lambda degrees: Decimal(degrees) * (Decimal(math.pi) / Decimal(180)),
			'to_degrees': lambda radians: Decimal(radians) * (Decimal(180) / Decimal(math.pi))
		}

		# Evaluate the mathematical expression within a safe environment
		result = eval(expression, {"__builtins__": None}, allowed_functions)

		# Format the result with the specified number of decimal places
		format_string = f'{{:,.{decimal_places}f}}'
		formatted_result = format_string.format(result).replace(',', 'X').replace('.', ',').replace('X', '.')
		# Remove trailing zeros and unnecessary decimal separator
		formatted_result = formatted_result.rstrip('0').rstrip(',')
		return formatted_result
	except Exception as e:
		# Return error message in case of invalid input or calculation error
		return f"Error in calculation: {e}"

def print_help():
	print("""
Usage: calc [OPTIONS] "EXPRESSION" [DECIMALS]

A command-line calculator that supports basic and advanced mathematical operations.

Options:
  -h, --help         Show this help message and exit

Mathematical Operations:
  Basic operations:
    +  Addition:          "5 + 3"
    -  Subtraction:       "5 - 3"
    *  Multiplication:    "5 * 3"
    /  Division:          "5 / 3"
    // Integer Division:  "5 // 3"
    %  Modulo:            "5 % 3"
    ** Exponentiation:    "2 ** 3"

  Advanced operations:
    Square root:          "sqrt(16)" or "16 ** 0.5"
    Cubic root:           "27 ** (1/3)"
    Fourth root:          "81 ** (1/4)"
    Logarithms:
      Natural log:        "log(10)"
      Log base 10:        "log10(10)"
    Trigonometric functions:
      Sin:                "sin(3.14159 / 2)" (x in radians)
      Cos:                "cos(3.14159 / 2)" (x in radians)
      Tan:                "tan(3.14159 / 2)" (x in radians)
    Exponential:          "exp(1)"
    Constants:
      Pi:                 "pi"
      Euler's number:     "e"
    Angle conversions:
      Degrees to radians: "to_radians(45)"
      Radians to degrees: "to_degrees(3.14159 / 4)"

Examples:
  calc "5 + 3"
  calc "10 / 2"
  calc "2 ** 3"
  calc "16 ** 0.5"
  calc "sqrt(16)"
  calc "27 ** (1/3)"
  calc "81 ** (1/4)"
  calc "10 % 3"
  calc "2 * 2.786"
  calc "sin(3.14159 / 2)"
  calc "log(10)"
  calc "exp(1)"
  calc "pi"
  calc "pi 5"                        # Output with 5 decimal places (max = 48)
  calc "e"
  calc "e 15"                        # Output with 15 decimal places (max = 51)
  calc "to_radians(90)"
  calc "to_degrees(3.14159 / 2)"
  calc "to_radians(45)" 5            # Output with 5 decimal places
  calc "to_degrees(3.14159 / 4)" 10  # Output with 10 decimal places
""")

if __name__ == "__main__":
	if len(sys.argv) > 1:
		if sys.argv[1] in ('-h', '--help'):
			print_help()
		else:
			# Join all command line arguments into a single expression
			expression = sys.argv[1]
			decimal_places = int(sys.argv[2]) if len(sys.argv) > 2 and sys.argv[2].isdigit() else 10
			# Calculate and print the result
			print(calculate(expression, decimal_places))
	else:
		# Print a message if no arguments are provided
		print("Please provide a mathematical expression or use -h for help.")

